package com.company;

import com.alibaba.fastjson.JSONObject;
import com.company.es.LogInfo;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.support.master.AcknowledgedResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.core.MainResponse;
import org.elasticsearch.client.indices.CreateIndexRequest;
import org.elasticsearch.client.indices.CreateIndexResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.builder.SearchSourceBuilder;

import java.io.IOException;

public class Main {

    public static void main(String[] args) {
        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials("elastic", "Paas,321"));
        RestHighLevelClient client = new RestHighLevelClient(
                RestClient.builder(new HttpHost("es-rx7fl1wc.public.tencentelasticsearch.com", 9200, "https"))
                        .setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {
                            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {
                                httpClientBuilder.disableAuthCaching();
                                return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
                            }
                        }));
        MainResponse resp = null;
        try {
            resp = client.info(RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(resp.getClusterName());
        createIndex(client, "analysis");
//        JSONObject obj = new JSONObject();
//        obj.put("C","c");
//        obj.put("D","d");
//        insertJson(client,"feeli",obj);
//        bulkInsert(client,"feeli");
//        deleteIndex(client,"chains");
        search(client, "chains");
    }

    public static void createIndex(RestHighLevelClient client, String index) {
        CreateIndexRequest request = new CreateIndexRequest(index);

        CreateIndexResponse resp = null;
        try {
            resp = client.indices().create(request, RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(resp);
    }

    public static void insertJson(RestHighLevelClient client, String index, JSONObject object) {
        IndexRequest request = new IndexRequest(index);
        request.source(object);
        IndexResponse resp = null;
        try {
            resp = client.index(request, RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(resp);
    }

    public static void bulkInsert(RestHighLevelClient client, String index) {
        BulkRequest bulk = new BulkRequest();
        for (int i = 0; i < 100; i++) {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put(new Integer(i).toString(), i);
            IndexRequest request = new IndexRequest(index);
            request.source(jsonObject);
            bulk.add(request);
        }

        BulkResponse resp = null;
        try {
            resp = client.bulk(bulk, RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(resp);
    }

    public static void deleteIndex(RestHighLevelClient client, String index) {
        DeleteRequest request = new DeleteRequest(index);
        DeleteIndexRequest req = new DeleteIndexRequest(index);
        AcknowledgedResponse response = null;
        try {
            response = client.indices().delete(req, RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(response);
    }

    public static void search(RestHighLevelClient client, String index) {
        MatchQueryBuilder match = QueryBuilders.matchQuery(LogInfo.UUID, "");
        TermsQueryBuilder tsb = QueryBuilders.termsQuery(LogInfo.LOGO, LogInfo.SERVER_RECV, LogInfo.SERVER_RESP);
        BoolQueryBuilder bl = QueryBuilders.boolQuery();
        bl.filter(tsb);
        bl.mustNot(match);
        SearchSourceBuilder search = new SearchSourceBuilder();
        search.fetchSource(new String[]{LogInfo.UUID}, new String[]{});
        search.query(bl);
        search.size(20000);
        SearchRequest req = new SearchRequest(index);
        req.source(search);
        SearchResponse resp = null;
        try {
            resp = client.search(req, RequestOptions.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        //System.out.println(resp.getHits().getHits().length);
        for (int i = 0; i < resp.getHits().getHits().length; i++) {
            JSONObject obj = new JSONObject(resp.getHits().getHits()[i].getSourceAsMap());
            System.out.println(obj.get(LogInfo.UUID));
            System.out.println(i);
        }

    }
}
